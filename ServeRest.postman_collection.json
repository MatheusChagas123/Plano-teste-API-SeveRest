{
	"info": {
		"_postman_id": "02fca3aa-f75c-4e17-b379-fd000088cca7",
		"name": "ServeRest",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21100219"
	},
	"item": [
		{
			"name": "Fluxos",
			"item": [
				{
					"name": "Cadastros",
					"item": [
						{
							"name": "Cadastrar usuário (ADM)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let name = pm.variables.replaceIn('{{$randomFullName}}')\r",
											"let email = pm.variables.replaceIn('{{$randomEmail}}')\r",
											"let senha = pm.variables.replaceIn('{{$randomPassword}}')\r",
											"\r",
											"var body = \r",
											"  {\r",
											"  \"nome\": pm.variables.replaceIn('{{$randomFullName}}'),\r",
											"  \"email\": pm.variables.replaceIn('{{$randomEmail}}'),\r",
											"  \"password\": pm.variables.replaceIn('{{$randomPassword}}'),\r",
											"  \"administrador\": \"true\"\r",
											"\r",
											" }; \r",
											"pm.collectionVariables.set('req_body', JSON.stringify(body));\r",
											"pm.environment.set(\"senhaValida\", body.password),\r",
											"pm.environment.set(\"emailValido\", body.email)\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"     pm.response.to.be.success;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const atributos = ['message', '_id']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test(`Resposta contém atributo \"${atributo}\"`, () => {\r",
											"        pm.expect(pm.response.json()[atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n{\r\n  \"nome\":\"{{$randomNamePrefix}}\",\r\n  \"email\":\"{{$randomEmail}}\",\r\n  \"password\":\"teste\",\r\n  \"administrador\": \"true\"\r\n\r\n }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{acessoUrl}}/usuarios",
									"host": [
										"{{acessoUrl}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						},
						{
							"name": "Realizar login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code é 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Login realizado com sucesso\");\r",
											"});\r",
											"\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"     pm.response.to.be.ok;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											" \r",
											" var jsonData = JSON.parse(responseBody)\r",
											"\r",
											"pm.environment.set('token', jsonData.authorization.slice(7))\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\":\"admteste@gmail.com\",\r\n  \"password\":\"teste\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{acessoUrl}}/login",
									"host": [
										"{{acessoUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cadastrar produto (ADM)",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const url = pm.environment.get('baseUrl');\r",
											"\r",
											"\r",
											"const loginAdm = {\r",
											"  url: `${url}/login`,\r",
											"  method: 'POST',\r",
											"  header: {\r",
											"    'Content-Type': 'application/json',\r",
											"    \r",
											"  },\r",
											"  body: {\r",
											"    mode: 'raw',\r",
											"    raw: JSON.stringify({ \r",
											"        \"email\":\"admteste@gmail.com\",\r",
											"  \"password\":\"teste\" })\r",
											"    }\r",
											"};\r",
											"\r",
											"pm.sendRequest(loginAdm, (err, response) => {\r",
											"    console.log(err ? err : response.json());\r",
											"    try{\r",
											"        pm.environment.set('token', response.json().authorization.slice(7))\r",
											"        pm.environment.set('_idProduto', res._id)\r",
											"    }catch{\r",
											"        console.warn('Erro')\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status do código é 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Mensagem  está  correta\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"nome\":\"{{$randomFullName}}\",\r\n  \"preco\": 10,\r\n  \"descricao\": \"Mouse\",\r\n  \"quantidade\": 10\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/produtos",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Finalizando compra",
					"item": [
						{
							"name": "Cadastrar usuário",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"     pm.response.to.be.success;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const atributos = ['message', '_id']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test(`Resposta contém atributo \"${atributo}\"`, () => {\r",
											"        pm.expect(pm.response.json()[atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let name = pm.variables.replaceIn('{{$randomFullName}}')\r",
											"let email = pm.variables.replaceIn('{{$randomEmail}}')\r",
											"let senha = pm.variables.replaceIn('{{$randomPassword}}')\r",
											"\r",
											"var body = \r",
											"  {\r",
											"  \"nome\": pm.variables.replaceIn('{{$randomFullName}}'),\r",
											"  \"email\": pm.variables.replaceIn('{{$randomEmail}}'),\r",
											"  \"password\": pm.variables.replaceIn('{{$randomPassword}}'),\r",
											"  \"administrador\": \"false\"\r",
											"\r",
											" }; \r",
											"pm.collectionVariables.set('req_body', JSON.stringify(body));\r",
											"pm.environment.set(\"senhaUsuarioNormal\", body.password),\r",
											"pm.environment.set(\"emailUsuarioNormal\", body.email)\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n{{req_body}}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{acessoUrl}}/usuarios",
									"host": [
										"{{acessoUrl}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						},
						{
							"name": "Realizar login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code é 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Login realizado com sucesso\");\r",
											"});\r",
											"\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"     pm.response.to.be.ok;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											" \r",
											" var jsonData = JSON.parse(responseBody)\r",
											"\r",
											"pm.environment.set('token', jsonData.authorization.slice(7))\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"{{emailUsuarioNormal}}\",\r\n  \"password\": \"{{senhaUsuarioNormal}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{acessoUrl}}/login",
									"host": [
										"{{acessoUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Buscar produtos",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code é 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"     pm.response.to.be.success;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											" \r",
											"var jsonData = JSON.parse(responseBody)\r",
											"\r",
											"pm.environment.set(\"_idProduto\", jsonData.produtos[0]._id)"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{acessoUrl}}/produtos/",
									"host": [
										"{{acessoUrl}}"
									],
									"path": [
										"produtos",
										""
									]
								}
							},
							"response": []
						},
						{
							"name": "Cadastrar carrinho",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code é 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"     pm.response.to.be.success;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											" \r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\": \"{{_idProduto}}\",\r\n      \"quantidade\": 1\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{acessoUrl}}/carrinhos",
									"host": [
										"{{acessoUrl}}"
									],
									"path": [
										"carrinhos"
									]
								}
							},
							"response": []
						},
						{
							"name": "Excluir carrinho (concluir-compra)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code é 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"     pm.response.to.be.ok;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"\r",
											"const atributo = ['menssage']\r",
											"\r",
											"pm.test(`Resposta contém o atributo '${atributo}'`)\r",
											" \r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{acessoUrl}}/carrinhos/concluir-compra",
									"host": [
										"{{acessoUrl}}"
									],
									"path": [
										"carrinhos",
										"concluir-compra"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "cancelando compra",
					"item": [
						{
							"name": "Cadastrar usuário",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"     pm.response.to.be.success;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const atributos = ['message', '_id']\r",
											"\r",
											"atributos.forEach((atributo) => {\r",
											"    pm.test(`Resposta contém atributo \"${atributo}\"`, () => {\r",
											"        pm.expect(pm.response.json()[atributo]).to.exist\r",
											"    })\r",
											"})\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"let name = pm.variables.replaceIn('{{$randomFullName}}')\r",
											"let email = pm.variables.replaceIn('{{$randomEmail}}')\r",
											"let senha = pm.variables.replaceIn('{{$randomPassword}}')\r",
											"\r",
											"var body = \r",
											"  {\r",
											"  \"nome\": pm.variables.replaceIn('{{$randomFullName}}'),\r",
											"  \"email\": pm.variables.replaceIn('{{$randomEmail}}'),\r",
											"  \"password\": pm.variables.replaceIn('{{$randomPassword}}'),\r",
											"  \"administrador\": \"false\"\r",
											"\r",
											" }; \r",
											"pm.collectionVariables.set('req_body', JSON.stringify(body));\r",
											"pm.environment.set(\"senhaUsuarioNormal\", body.password),\r",
											"pm.environment.set(\"emailUsuarioNormal\", body.email)\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "\r\n{{req_body}}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{acessoUrl}}/usuarios",
									"host": [
										"{{acessoUrl}}"
									],
									"path": [
										"usuarios"
									]
								}
							},
							"response": []
						},
						{
							"name": "Realizar login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code é 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"Body matches string\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Login realizado com sucesso\");\r",
											"});\r",
											"\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"     pm.response.to.be.ok;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											" \r",
											" var jsonData = JSON.parse(responseBody)\r",
											"\r",
											"pm.environment.set('token', jsonData.authorization.slice(7))\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"{{emailUsuarioNormal}}\",\r\n  \"password\": \"{{senhaUsuarioNormal}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{acessoUrl}}/login",
									"host": [
										"{{acessoUrl}}"
									],
									"path": [
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "listar produtos",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code é 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"     pm.response.to.be.success;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											" \r",
											"var jsonData = JSON.parse(responseBody)\r",
											"\r",
											"pm.environment.set(\"_idProduto\", jsonData.produtos[0]._id)"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{acessoUrl}}/produtos",
									"host": [
										"{{acessoUrl}}"
									],
									"path": [
										"produtos"
									]
								}
							},
							"response": []
						},
						{
							"name": "Cadastrar carrinho",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code é 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"     pm.response.to.be.success;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											" \r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\": \"{{_idProduto}}\",\r\n      \"quantidade\": 1\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{acessoUrl}}/carrinhos",
									"host": [
										"{{acessoUrl}}"
									],
									"path": [
										"carrinhos"
									]
								}
							},
							"response": []
						},
						{
							"name": "Excluir carrinho e retornar produtos para estoque",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code é 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Status code name has string\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"Response time is less than 200ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
											"});\r",
											"\r",
											"pm.test(\"response must be valid and have a body\", function () {\r",
											"     pm.response.to.be.ok;\r",
											"     pm.response.to.be.withBody;\r",
											"     pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"\r",
											"const atributo = ['menssage']\r",
											"\r",
											"pm.test(`Resposta contém o atributo '${atributo}'`)\r",
											" \r",
											" \r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{acessoUrl}}/carrinhos/cancelar-compra",
									"host": [
										"{{acessoUrl}}"
									],
									"path": [
										"carrinhos",
										"cancelar-compra"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "/Login",
			"item": [
				{
					"name": "Login ✔️",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"\r",
									"//const response = pm.response.json();\r",
									"//pm.environment.set('token', response.authorization.slice(7))\r",
									"\r",
									"// Verificação de código\r",
									"pm.test(\"Status do código é 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"// Verificação se a respota está escrita\r",
									"pm.test(\"Mensagem  está  correta\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Login realizado com sucesso\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"email\": \"fulano@qa.com\",\r\n\"password\": \"teste\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login_email_vazio ❌",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verificação de código\r",
									"pm.test(\"Status do código é 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"\r",
									"// Verificação se a respota está escrita\r",
									"pm.test(\"Mensagem  está  correta\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"email não pode ficar em branco\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"email\": \"\",\r\n\"password\": \"teste\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login _senha_vazia ❌",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verificação de código\r",
									"pm.test(\"Status do código é 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"\r",
									"// Verificação se a respota está escrita\r",
									"pm.test(\"Mensagem  está  correta\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"password não pode ficar em branco\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"email\": \"fulano@qa.com\",\r\n\"password\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login _Email_incorreto ❌",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verificação de código\r",
									"pm.test(\"Status do código é 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"\r",
									"// Verificação se a respota está escrita\r",
									"pm.test(\"Mensagem  está  correta\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"email deve ser um email válido\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"email\": \"fulano\",\r\n\"password\": \"teste\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login _Senha_incorreta ❌",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verificação de código\r",
									"pm.test(\"Status do código é 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"\r",
									"// Verificação se a respota está escrita\r",
									"pm.test(\"Mensagem  está  correta\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Email e/ou senha inválidos\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n\"email\": \"fulano@gmail.com\",\r\n\"password\": \"tese\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/login",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "/Usuarios",
			"item": [
				{
					"name": "/lista_de_usuarios ✔️",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status do código é 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/usuarios",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"usuarios"
							]
						}
					},
					"response": []
				},
				{
					"name": "Buscar_usuario✔️",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verificação de código\r",
									"pm.test(\"Status do código é 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"// Verificação se a respota está escrita\r",
									"const response = pm.response.json() ;\r",
									"const atributos = ['nome','email','password','administrador','_id'];\r",
									"\r",
									"atributos.forEach((atributo) => {\r",
									"    pm.test(`Resposta contém atributo\"${atributo}`),() => {\r",
									"        pm.expect(response[atributo]).to.exist\r",
									"    }\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/usuarios/paCMbh2ZdEy6ZoyE",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"usuarios",
								"paCMbh2ZdEy6ZoyE"
							]
						}
					},
					"response": []
				},
				{
					"name": "Del_usuário✔️",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verificação de código\r",
									"pm.test(\"Status do código é 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"// Verificação se a respota está escrita\r",
									"pm.test(\"Mensagem  está  correta\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Registro excluído com sucesso\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const url = pm.environment.get('baseUrl');\r",
									"\r",
									"const CadastroUsuario = {\r",
									"    url: `${url}/usuarios`,\r",
									"    method: 'POST', \r",
									"    header: {'Content-Type': 'application/json'}, \r",
									"    body: {\r",
									"        mode: 'raw', \r",
									"        raw: JSON.stringify({\r",
									"                  \"nome\": \"Excluido da Silva\",\r",
									"                  \"email\": `Bye@vaiembora.com`,\r",
									"                  \"password\": `adeus`,\r",
									"                  \"administrador\": \"true\"\r",
									"        })\r",
									"    }\r",
									"}\r",
									"pm.sendRequest(CadastroUsuario, (err, response) => {\r",
									"        console.log(err ? err : response.json());\r",
									"        try{\r",
									"            pm.environment.set('IdExcluir', response.json()._id);\r",
									"            } catch{\r",
									"                console.log(\"Falhou\");\r",
									"                }\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/usuarios/{{IdExcluir}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"usuarios",
								"{{IdExcluir}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Editar_usuario✔️",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verificação de código\r",
									"pm.test(\"Status do código é 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\r\n            \"nome\": \"troquei da Silva\",\r\n            \"email\": \"{{$randomEmail}}\",\r\n            \"password\": \"azul\",\r\n            \"administrador\": \"true\"\r\n            \r\n        }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/usuarios/4ZbvOkbQ8HwVT9G0",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"usuarios",
								"4ZbvOkbQ8HwVT9G0"
							]
						}
					},
					"response": []
				},
				{
					"name": "Editar_usuario_novo✔️",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verificação de código\r",
									"pm.test(\"Status do código é 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"\r",
									"// Verificação se a respota está escrita\r",
									"pm.test(\"Mensagem  está  correta\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\r\n            \"nome\": \"troquei da Silva\",\r\n            \"email\": \"{{$randomEmail}}\",\r\n            \"password\": \"teste\",\r\n            \"administrador\": \"true\"\r\n            \r\n        }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/usuarios/RgH33FA0P0sGKd7q",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"usuarios",
								"RgH33FA0P0sGKd7q"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add_usuariosComum✔️",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verificação de código\r",
									"pm.test(\"Status do código é 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"\r",
									"// Verificação se a respota está escrita\r",
									"pm.test(\"Mensagem  está  correta\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"{{$randomFullName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"password\": \"{{$randomPassword}}\",\r\n  \"administrador\": \"false\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/usuarios",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"usuarios"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add_usuariosADM✔️",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verificação de código\r",
									"pm.test(\"Status do código é 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"\r",
									"// Verificação se a respota está escrita\r",
									"pm.test(\"Mensagem  está  correta\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"{{$randomFullName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"password\": \"{{$randomPassword}}\",\r\n  \"administrador\": \"true\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/usuarios",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"usuarios"
							]
						}
					},
					"response": []
				},
				{
					"name": "Del_usuário_comCarrinho❌",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verificação de código\r",
									"pm.test(\"Status do código é 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/usuarios/yhj8EBSRLXMexUhX",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"usuarios",
								"yhj8EBSRLXMexUhX"
							]
						}
					},
					"response": []
				},
				{
					"name": "Buscar_usu_sem_cadastro❌",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verificação de código\r",
									"pm.test(\"Status do código é 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"\r",
									"// Verificação se a respota está escrita\r",
									"pm.test(\"Mensagem  está  correta\", function () {\r",
									"    pm.expect(pm.response.text()).to.include( \"Usuário não encontrado\");\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/usuarios/lWCFE3ajmoyhqd5u",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"usuarios",
								"lWCFE3ajmoyhqd5u"
							]
						}
					},
					"response": []
				},
				{
					"name": "Editar_usuario_semInfo❌",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verificação de código\r",
									"pm.test(\"Status do código é 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/usuarios/RgH33FA0P0sGKd7q",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"usuarios",
								"RgH33FA0P0sGKd7q"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit.usuario.com.emailcad❌",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verificação de código\r",
									"pm.test(\"Status do código é 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": " {\r\n            \"nome\": \"troquei da Silva\",\r\n            \"email\": \"TERCE@qa.com.br\",\r\n            \"password\": \"teste\",\r\n            \"administrador\": \"true\"\r\n            \r\n        }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/usuarios/RgH33FA0P0sGKd7q",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"usuarios",
								"RgH33FA0P0sGKd7q"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add_usuarios_semNome❌",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verificação de código\r",
									"pm.test(\"Status do código é 201\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"\r",
									"// Verificação se a respota está escrita\r",
									"pm.test(\"Mensagem  está  correta\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"nome não pode ficar em branco\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"\",\r\n  \"email\": \"semnome@qa.com.br\",\r\n  \"password\": \"teste\",\r\n  \"administrador\": \"true\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/usuarios",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"usuarios"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add_usuarios_semEmail❌",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verificação de código\r",
									"pm.test(\"Status do código é 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"\r",
									"// Verificação se a respota está escrita\r",
									"pm.test(\"Mensagem  está  correta\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"email não pode ficar em branco\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"Sem Email da silva\",\r\n  \"email\": \"\",\r\n  \"password\": \"teste\",\r\n  \"administrador\": \"true\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/usuarios",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"usuarios"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add_usuarios_erroEmail❌",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verificação de código\r",
									"pm.test(\"Status do código é 201\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"\r",
									"// Verificação se a respota está escrita\r",
									"pm.test(\"Mensagem  está  correta\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"email deve ser um email válido\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"email errado da silva\",\r\n  \"email\": \"emailerradoqa.com.br\",\r\n  \"password\": \"teste\",\r\n  \"administrador\": \"true\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/usuarios",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"usuarios"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add_usuarios_semSenha❌",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verificação de código\r",
									"pm.test(\"Status do código é 201\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"\r",
									"// Verificação se a respota está escrita\r",
									"pm.test(\"Mensagem  está  correta\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"password não pode ficar em branco\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"sem senha da silva\",\r\n  \"email\": \"semsenha@qa.com.br\",\r\n  \"password\": \"\",\r\n  \"administrador\": \"true\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/usuarios",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"usuarios"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add_usuarios_sem_adm❌",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verificação de código\r",
									"pm.test(\"Status do código é 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"\r",
									"// Verificação se a respota está escrita\r",
									"pm.test(\"Mensagem  está  correta\", function () {\r",
									"    pm.expect(pm.response.text()).to.include( \"administrador deve ser 'true' ou 'false'\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"{{$randomFullName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"password\": \"{{$randomPassword}}\",\r\n  \"administrador\": \"\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/usuarios",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"usuarios"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add_usuarios_admInvalido❌",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Verificação de código\r",
									"pm.test(\"Status do código é 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"\r",
									"// Verificação se a respota está escrita\r",
									"pm.test(\"Mensagem  está  correta\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"administrador deve ser 'true' ou 'false'\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"{{$randomFullName}}\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"password\": \"{{$randomPassword}}\",\r\n  \"administrador\": \"teste\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/usuarios",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"usuarios"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "/Produtos",
			"item": [
				{
					"name": "Listar_produtos✔️",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status do código é 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/produtos",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"produtos"
							]
						}
					},
					"response": []
				},
				{
					"name": "Buscar_produtos✔️",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status do código é 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/produtos/8125JetlWwPwD6O7",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"produtos",
								"8125JetlWwPwD6O7"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add_Produtos_ADM✔️",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const url = pm.environment.get('baseUrl');\r",
									"\r",
									"\r",
									"const loginAdm = {\r",
									"  url: `${url}/login`,\r",
									"  method: 'POST',\r",
									"  header: {\r",
									"    'Content-Type': 'application/json',\r",
									"    \r",
									"  },\r",
									"  body: {\r",
									"    mode: 'raw',\r",
									"    raw: JSON.stringify({ \r",
									"        \"email\": \"fulano@qa.com\",\r",
									"        \"password\": \"teste\" })\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.sendRequest(loginAdm, (err, response) => {\r",
									"    console.log(err ? err : response.json());\r",
									"    try{\r",
									"        pm.environment.set('token', response.json().authorization.slice(7))\r",
									"    }catch{\r",
									"        console.warn('Erro')\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status do código é 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Mensagem  está  correta\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Cadastro realizado com sucesso\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\":\"{{$randomFullName}}\",\r\n  \"preco\": 10,\r\n  \"descricao\": \"Mouse\",\r\n  \"quantidade\": 10\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/produtos",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"produtos"
							]
						}
					},
					"response": []
				},
				{
					"name": "Del_Produtos_ADM✔️",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const url = pm.environment.get('baseUrl');\r",
									"\r",
									"\r",
									"let name = pm.variables.replaceIn('{{$randomFullName}}')\r",
									"let email = pm.variables.replaceIn('{{$randomEmail}}')\r",
									"let senha = pm.variables.replaceIn('{{$randomPassword}}')\r",
									"\r",
									"//-----------------------------\r",
									"let produto = pm.variables.replaceIn('{{$randomProductName}}')\r",
									"let preco = pm.variables.replaceIn('{{$randomInt}}')\r",
									"let descricao = pm.variables.replaceIn('{{$randomProductMaterial}}')\r",
									"let quantidade = pm.variables.replaceIn('{{$randomInt}}')\r",
									"let token = pm.environment.get( 'token')\r",
									"let id_produto = pm.environment.get(\"_idProduto\")\r",
									"\r",
									"\r",
									"\r",
									"const CadastroUsuario = {\r",
									"    url: `${url}/usuarios`, //variavel\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            \"nome\": name,\r",
									"            \"email\": email,\r",
									"            \"password\": senha,\r",
									"            \"administrador\": \"true\"\r",
									"        })\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.sendRequest(CadastroUsuario, function (err, response) {\r",
									"    const res = response.json()\r",
									"    console.log(err ? err : res);\r",
									"    try {\r",
									"        //operação\r",
									"        pm.environment.set('emailValido', email)\r",
									"        pm.environment.set('senhaValida', senha)\r",
									"        pm.environment.set('_id', res._id)\r",
									"\r",
									"        const Login = {\r",
									"            url: `${url}/login`, //variavel\r",
									"            method: 'POST',\r",
									"            header: {\r",
									"                'Content-Type': 'application/json'\r",
									"            },\r",
									"            body: {\r",
									"                mode: 'raw',\r",
									"                raw: JSON.stringify({\r",
									"                    \"email\": email,\r",
									"                    \"password\": senha\r",
									"                })\r",
									"            }\r",
									"        }\r",
									"\r",
									"        pm.sendRequest(Login, function (err, response) {\r",
									"            const res = response.json()\r",
									"            console.log(err ? err : res);\r",
									"            try {\r",
									"                //operação\r",
									"                pm.environment.set('token', res.authorization.slice(7))\r",
									"\r",
									" const CadastrarProduto = {\r",
									"            url: `${url}/produtos`, //variavel\r",
									"            method: 'POST',\r",
									"            header: {\r",
									"                'Content-Type': 'application/json',\r",
									"                'Authorization': `Bearer ${token}`\r",
									"            },\r",
									"            body: {\r",
									"                mode: 'raw',\r",
									"                raw: JSON.stringify({\r",
									"                    \"nome\": produto,\r",
									"                    \"preco\": preco,\r",
									"                    \"descricao\": descricao,\r",
									"                    \"quantidade\": quantidade\r",
									"                })\r",
									"            }\r",
									"        }\r",
									"\r",
									"        pm.sendRequest(CadastrarProduto, function (err, response) {\r",
									"            const res = response.json()\r",
									"            console.log(err ? err : res);\r",
									"            try {\r",
									"                //operação\r",
									"                pm.environment.set('_idProduto', res._id)\r",
									"\r",
									"            } catch{\r",
									"                //outraOp\r",
									"                console.warn(\"Falha ao cadastrar produto\")\r",
									"            }\r",
									"        });\r",
									"            } catch{\r",
									"                //outraOp\r",
									"                console.warn(\"Falha no login\")\r",
									"            }\r",
									"        });\r",
									"\r",
									"    } catch{\r",
									"        //outraOp\r",
									"        console.warn(\"Falha ao cadastrar usuario\")\r",
									"    }\r",
									"})\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status do código é 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/produtos/{{_idProduto}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"produtos",
								"{{_idProduto}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Editar_produtos_ADM✔️",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const url = pm.environment.get('baseUrl')\r",
									"let name = pm.variables.replaceIn('{{$randomFullName}}')\r",
									"let email = pm.variables.replaceIn('{{$randomEmail}}')\r",
									"let senha = pm.variables.replaceIn('{{$randomPassword}}')\r",
									"\r",
									"\r",
									"\r",
									"const postRequestCadastroUsuario = {\r",
									"    url: `${url}/usuarios`, //variavel\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            \"nome\": name,\r",
									"            \"email\": email,\r",
									"            \"password\": senha,\r",
									"            \"administrador\": \"true\"\r",
									"        })\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.sendRequest(postRequestCadastroUsuario, function (err, response) {\r",
									"    const res = response.json()\r",
									"    console.log(err ? err : res);\r",
									"    try {\r",
									"        //operação\r",
									"        pm.environment.set('emailValido', email)\r",
									"        pm.environment.set('senhaValida', senha)\r",
									"        pm.environment.set('_id', res._id)\r",
									"\r",
									"        const postRequestLogin = {\r",
									"            url: `${url}/login`, //variavel\r",
									"            method: 'POST',\r",
									"            header: {\r",
									"                'Content-Type': 'application/json'\r",
									"            },\r",
									"            body: {\r",
									"                mode: 'raw',\r",
									"                raw: JSON.stringify({\r",
									"                    \"email\": email,\r",
									"                    \"password\": senha\r",
									"                })\r",
									"            }\r",
									"        }\r",
									"\r",
									"        pm.sendRequest(postRequestLogin, function (err, response) {\r",
									"            const res = response.json()\r",
									"            console.log(err ? err : res);\r",
									"            try {\r",
									"                //operação\r",
									"                pm.environment.set('token', res.authorization.slice(7))\r",
									"\r",
									"\r",
									"                const pegarIdProduto = {\r",
									"                    url: `${url}/produtos`, //variavel\r",
									"                    method: 'GET',\r",
									"                    header: {\r",
									"                        'Content-Type': 'application/json'\r",
									"                    },\r",
									"\r",
									"                }\r",
									"\r",
									"                pm.sendRequest(pegarIdProduto, function (err, response) {\r",
									"                    const res = response.json()\r",
									"                    console.log(err ? err : res);\r",
									"                    try {\r",
									"                        //operação\r",
									"                        pm.environment.set('_idProduto', res.produtos[0]._id)\r",
									"\r",
									"                    } catch{\r",
									"                        //outraOp\r",
									"                        console.warn(\"Falha na requisição do ID\")\r",
									"                    }\r",
									"                });\r",
									"\r",
									"\r",
									"            } catch{\r",
									"                //outraOp\r",
									"                console.warn(\"Falha no login\")\r",
									"            }\r",
									"        });\r",
									"\r",
									"    } catch{\r",
									"        //outraOp\r",
									"        console.warn(\"Falha ao cadastrar usuario\")\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status do código é 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"{{$randomFullName}}\",\r\n  \"preco\": 470,\r\n  \"descricao\": \"Mouse\",\r\n  \"quantidade\": 38134\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/produtos/{{_idProduto}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"produtos",
								"{{_idProduto}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Buscar_produtos_sem_id❌",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status do código é 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{baseUrl}}/produtos/mtzCf8RMNC5NMs2w",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"produtos",
								"mtzCf8RMNC5NMs2w"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cad_prod_Token.Invalid❌",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code name has string\", function () {\r",
									"    pm.response.to.have.status(\"Unauthorized\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"resposta deve ser válida e ter um corpo\", function () {\r",
									"     pm.response.to.be.unauthorized;\r",
									"     pm.response.to.be.withBody;\r",
									"     pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"pm.test(\"O body Corresponde a string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Token de acesso ausente, inválido, expirado ou usuário do token não existe mais\");\r",
									"});\r",
									" \r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"{{$randomProductName}}\",\r\n  \"preco\": {{$randomInt}},\r\n  \"descricao\": \"{{$randomProductMaterial}}\",\r\n  \"quantidade\": {{$randomInt}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{acessoUrl}}/produtos",
							"host": [
								"{{acessoUrl}}"
							],
							"path": [
								"produtos"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add.Produtos.cadastrado❌",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const url = pm.environment.get('baseUrl');\r",
									"\r",
									"\r",
									"const loginAdm = {\r",
									"  url: `${url}/login`,\r",
									"  method: 'POST',\r",
									"  header: {\r",
									"    'Content-Type': 'application/json',\r",
									"    \r",
									"  },\r",
									"  body: {\r",
									"    mode: 'raw',\r",
									"    raw: JSON.stringify({ \r",
									"        \"email\": \"fulano@qa.com\",\r",
									"        \"password\": \"teste\" })\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.sendRequest(loginAdm, (err, response) => {\r",
									"    console.log(err ? err : response.json());\r",
									"    try{\r",
									"        pm.environment.set('token', response.json().authorization.slice(7))\r",
									"    }catch{\r",
									"        console.warn('Erro')\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status do código é 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Mensagem  está  correta\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Já existe produto com esse nome\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\":\"pão\",\r\n  \"preco\": 470,\r\n  \"descricao\": \"Mouse\",\r\n  \"quantidade\": 10\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/produtos",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"produtos"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add_Prod_Usua_comum❌",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const url = pm.environment.get('baseUrl');\r",
									"const login = pm.variables.replaceIn('{{$randomEmail}}');\r",
									"\r",
									"\r",
									"\r",
									"const CadastroUsuario = {\r",
									"    url: `${url}/usuarios`,\r",
									"    method: 'POST',\r",
									"    header: { 'Content-Type': 'application/json' },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            \"nome\": 'Teste usuaário aleatório',\r",
									"            \"email\": login,\r",
									"            \"password\": 'teste',\r",
									"            \"administrador\": \"false\"\r",
									"        })\r",
									"    }\r",
									"}\r",
									"pm.sendRequest(CadastroUsuario, (err, response) => {\r",
									"    console.log(err ? err : response.json());\r",
									"    try {\r",
									"        pm.environment.set('idUsuario', response.json()._id);\r",
									"\r",
									"\r",
									"        const loginAdm = {\r",
									"            url: `${url}/login`,\r",
									"            method: 'POST',\r",
									"            header: {\r",
									"                'Content-Type': 'application/json',\r",
									"\r",
									"            },\r",
									"            body: {\r",
									"                mode: 'raw',\r",
									"                raw: JSON.stringify({\r",
									"                    \"email\": login,\r",
									"                    \"password\": \"teste\"\r",
									"                })\r",
									"            }\r",
									"        };\r",
									"\r",
									"        pm.sendRequest(loginAdm, (err, response) => {\r",
									"            console.log(err ? err : response.json());\r",
									"            try {\r",
									"                pm.environment.set('token', response.json().authorization.slice(7))\r",
									"            } catch{\r",
									"                console.warn('Falhou login')\r",
									"            }\r",
									"        });\r",
									"\r",
									"    } catch{\r",
									"        console.log(\"Falhou criação de usuário\");\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status do código é 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});\r",
									"\r",
									"// Verificação se a respota está escrita\r",
									"pm.test(\"Mensagem  está  correta\", function () {\r",
									"    pm.expect(pm.response.text()).to.include( \"Rota exclusiva para administradores\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"{{$randomDomainName}}\",\r\n  \"preco\": 470,\r\n  \"descricao\": \"Mouse\",\r\n  \"quantidade\": 381\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/produtos",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"produtos"
							]
						}
					},
					"response": []
				},
				{
					"name": "Del_Prod_Usua_comum❌",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const url = pm.environment.get('baseUrl');\r",
									"\r",
									"\r",
									"let name = pm.variables.replaceIn('{{$randomFullName}}')\r",
									"let email = pm.variables.replaceIn('{{$randomEmail}}')\r",
									"let senha = pm.variables.replaceIn('{{$randomPassword}}')\r",
									"\r",
									"//-----------------------------\r",
									"let produto = pm.variables.replaceIn('{{$randomProductName}}')\r",
									"let preco = pm.variables.replaceIn('{{$randomInt}}')\r",
									"let descricao = pm.variables.replaceIn('{{$randomProductMaterial}}')\r",
									"let quantidade = pm.variables.replaceIn('{{$randomInt}}')\r",
									"let token = pm.environment.get( 'token')\r",
									"let id_produto = pm.environment.get(\"_idProduto\")\r",
									"\r",
									"\r",
									"\r",
									"const CadastroUsuario = {\r",
									"    url: `${url}/usuarios`, //variavel\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            \"nome\": name,\r",
									"            \"email\": email,\r",
									"            \"password\": senha,\r",
									"            \"administrador\": \"false\"\r",
									"        })\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.sendRequest(CadastroUsuario, function (err, response) {\r",
									"    const res = response.json()\r",
									"    console.log(err ? err : res);\r",
									"    try {\r",
									"        //operação\r",
									"        pm.environment.set('emailValido', email)\r",
									"        pm.environment.set('senhaValida', senha)\r",
									"        pm.environment.set('_id', res._id)\r",
									"\r",
									"        const Login = {\r",
									"            url: `${url}/login`, //variavel\r",
									"            method: 'POST',\r",
									"            header: {\r",
									"                'Content-Type': 'application/json'\r",
									"            },\r",
									"            body: {\r",
									"                mode: 'raw',\r",
									"                raw: JSON.stringify({\r",
									"                    \"email\": email,\r",
									"                    \"password\": senha\r",
									"                })\r",
									"            }\r",
									"        }\r",
									"\r",
									"        pm.sendRequest(Login, function (err, response) {\r",
									"            const res = response.json()\r",
									"            console.log(err ? err : res);\r",
									"            try {\r",
									"                //operação\r",
									"                pm.environment.set('token', res.authorization.slice(7))\r",
									"\r",
									" const CadastrarProduto = {\r",
									"            url: `${url}/produtos`, //variavel\r",
									"            method: 'POST',\r",
									"            header: {\r",
									"                'Content-Type': 'application/json',\r",
									"                'Authorization': `Bearer ${token}`\r",
									"            },\r",
									"            body: {\r",
									"                mode: 'raw',\r",
									"                raw: JSON.stringify({\r",
									"                    \"nome\": produto,\r",
									"                    \"preco\": preco,\r",
									"                    \"descricao\": descricao,\r",
									"                    \"quantidade\": quantidade\r",
									"                })\r",
									"            }\r",
									"        }\r",
									"\r",
									"        pm.sendRequest(CadastrarProduto, function (err, response) {\r",
									"            const res = response.json()\r",
									"            console.log(err ? err : res);\r",
									"            try {\r",
									"                //operação\r",
									"                pm.environment.set('_idProduto', res._id)\r",
									"\r",
									"            } catch{\r",
									"                //outraOp\r",
									"                console.warn(\"Falha ao cadastrar produto\")\r",
									"            }\r",
									"        });\r",
									"            } catch{\r",
									"                //outraOp\r",
									"                console.warn(\"Falha no login\")\r",
									"            }\r",
									"        });\r",
									"\r",
									"    } catch{\r",
									"        //outraOp\r",
									"        console.warn(\"Falha ao cadastrar usuario\")\r",
									"    }\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status do código é 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"teste MX Vertical\",\r\n  \"preco\": 470,\r\n  \"descricao\": \"Mouse\",\r\n  \"quantidade\": 381\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/produtos/{{_idProduto}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"produtos",
								"{{_idProduto}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Del_Prod_no_carrinho❌",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const url = pm.environment.get('acessoUrl')\r",
									"\r",
									"let name = pm.variables.replaceIn('{{$randomFullName}}')\r",
									"let email = pm.variables.replaceIn('{{$randomEmail}}')\r",
									"let senha = pm.variables.replaceIn('{{$randomPassword}}')\r",
									"\r",
									"//-----------------------------\r",
									"let produto = pm.variables.replaceIn('{{$randomProductName}}')\r",
									"let preco = pm.variables.replaceIn('{{$randomInt}}')\r",
									"let descricao = pm.variables.replaceIn('{{$randomProductMaterial}}')\r",
									"let quantidade = pm.variables.replaceIn('{{$randomInt}}')\r",
									"let btoken = pm.environment.get(\"token\")\r",
									"let id_produto = pm.environment.get(\"_idProduto\")\r",
									"\r",
									"\r",
									"\r",
									"const postRequestCadastroUsuario = {\r",
									"    url: `${url}/usuarios`, //variavel\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            \"nome\": name,\r",
									"            \"email\": email,\r",
									"            \"password\": senha,\r",
									"            \"administrador\": \"true\"\r",
									"        })\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.sendRequest(postRequestCadastroUsuario, function (err, response) {\r",
									"    const res = response.json()\r",
									"    console.log(err ? err : res);\r",
									"    try {\r",
									"        //operação\r",
									"        pm.environment.set('emailValido', email)\r",
									"        pm.environment.set('senhaValida', senha)\r",
									"        pm.environment.set('_id', res._id)\r",
									"\r",
									"        const postRequestLogin = {\r",
									"            url: `${url}/login`, //variavel\r",
									"            method: 'POST',\r",
									"            header: {\r",
									"                'Content-Type': 'application/json'\r",
									"            },\r",
									"            body: {\r",
									"                mode: 'raw',\r",
									"                raw: JSON.stringify({\r",
									"                    \"email\": email,\r",
									"                    \"password\": senha\r",
									"                })\r",
									"            }\r",
									"        }\r",
									"\r",
									"        pm.sendRequest(postRequestLogin, function (err, response) {\r",
									"            const res = response.json()\r",
									"            console.log(err ? err : res);\r",
									"            try {\r",
									"                //operação\r",
									"                pm.environment.set('token', res.authorization.slice(7))\r",
									"\r",
									"                pm.sendRequest(pegarIdCarrinhoProduto, function (err, response) {\r",
									"                    const res = response.json()\r",
									"                    console.log(err ? err : res);\r",
									"                    try {\r",
									"                        //operação\r",
									"                        pm.environment.set('_idProdutoNoCarrinho', res.carrinhos[0].produtos[0].idProduto)\r",
									"\r",
									"                    } catch{\r",
									"                        //outraOp\r",
									"                        console.warn(\"Falha na requisição do ID\")\r",
									"                    }\r",
									"                });\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"            } catch{\r",
									"                //outraOp\r",
									"                console.warn(\"Falha no login\")\r",
									"            }\r",
									"        });\r",
									"\r",
									"    } catch{\r",
									"        //outraOp\r",
									"        console.warn(\"Falha ao cadastrar usuario\")\r",
									"    }\r",
									"});\r",
									"\r",
									"const pegarIdCarrinhoProduto = {\r",
									"    url: `${url}/carrinhos`, //variavel\r",
									"    method: 'GET',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    },\r",
									"\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status do código é 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status do código é Bad Request\", function () {\r",
									"    pm.response.to.have.status('Bad Request');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"teste MX Vertical\",\r\n  \"preco\": 470,\r\n  \"descricao\": \"Mouse\",\r\n  \"quantidade\": 381\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/produtos/BeeJh5lz3k6kSIzA",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"produtos",
								"BeeJh5lz3k6kSIzA"
							]
						}
					},
					"response": []
				},
				{
					"name": "Editar_produtos_Comum❌",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const url = pm.environment.get('baseUrl')\r",
									"let name = pm.variables.replaceIn('{{$randomFullName}}')\r",
									"let email = pm.variables.replaceIn('{{$randomEmail}}')\r",
									"let senha = pm.variables.replaceIn('{{$randomPassword}}')\r",
									"\r",
									"\r",
									"\r",
									"const postRequestCadastroUsuario = {\r",
									"    url: `${url}/usuarios`, //variavel\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            \"nome\": name,\r",
									"            \"email\": email,\r",
									"            \"password\": senha,\r",
									"            \"administrador\": \"false\"\r",
									"        })\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.sendRequest(postRequestCadastroUsuario, function (err, response) {\r",
									"    const res = response.json()\r",
									"    console.log(err ? err : res);\r",
									"    try {\r",
									"        //operação\r",
									"        pm.environment.set('emailValido', email)\r",
									"        pm.environment.set('senhaValida', senha)\r",
									"        pm.environment.set('_id', res._id)\r",
									"\r",
									"        const postRequestLogin = {\r",
									"            url: `${url}/login`, //variavel\r",
									"            method: 'POST',\r",
									"            header: {\r",
									"                'Content-Type': 'application/json'\r",
									"            },\r",
									"            body: {\r",
									"                mode: 'raw',\r",
									"                raw: JSON.stringify({\r",
									"                    \"email\": email,\r",
									"                    \"password\": senha\r",
									"                })\r",
									"            }\r",
									"        }\r",
									"\r",
									"        pm.sendRequest(postRequestLogin, function (err, response) {\r",
									"            const res = response.json()\r",
									"            console.log(err ? err : res);\r",
									"            try {\r",
									"                //operação\r",
									"                pm.environment.set('token', res.authorization.slice(7))\r",
									"\r",
									"\r",
									"                const pegarIdProduto = {\r",
									"                    url: `${url}/produtos`, //variavel\r",
									"                    method: 'GET',\r",
									"                    header: {\r",
									"                        'Content-Type': 'application/json'\r",
									"                    },\r",
									"\r",
									"                }\r",
									"\r",
									"                pm.sendRequest(pegarIdProduto, function (err, response) {\r",
									"                    const res = response.json()\r",
									"                    console.log(err ? err : res);\r",
									"                    try {\r",
									"                        //operação\r",
									"                        pm.environment.set('_idProduto', res.produtos[0]._id)\r",
									"\r",
									"                    } catch{\r",
									"                        //outraOp\r",
									"                        console.warn(\"Falha na requisição do ID\")\r",
									"                    }\r",
									"                });\r",
									"\r",
									"\r",
									"            } catch{\r",
									"                //outraOp\r",
									"                console.warn(\"Falha no login\")\r",
									"            }\r",
									"        });\r",
									"\r",
									"    } catch{\r",
									"        //outraOp\r",
									"        console.warn(\"Falha ao cadastrar usuario\")\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status do código é 403\", function () {\r",
									"    pm.response.to.have.status(403);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"teste9 MX Vertical\",\r\n  \"preco\": 470,\r\n  \"descricao\": \"Mouse\",\r\n  \"quantidade\": 38134\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/produtos/{{_idProduto}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"produtos",
								"{{_idProduto}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Editar_prod_jáExiste❌",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const url = pm.environment.get('baseUrl');\r",
									"\r",
									"\r",
									"const loginAdm = {\r",
									"  url: `${url}/login`,\r",
									"  method: 'POST',\r",
									"  header: {\r",
									"    'Content-Type': 'application/json',\r",
									"    \r",
									"  },\r",
									"  body: {\r",
									"    mode: 'raw',\r",
									"    raw: JSON.stringify({ \r",
									"        \"email\": \"fulano@qa.com\",\r",
									"        \"password\": \"teste\" })\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.sendRequest(loginAdm, (err, response) => {\r",
									"    console.log(err ? err : response.json());\r",
									"    try{\r",
									"        pm.environment.set('token', response.json().authorization.slice(7))\r",
									"    }catch{\r",
									"        console.warn('Erro')\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status do código é 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"pm.test(\"Status do código é Bad Request\", function () {\r",
									"    pm.response.to.have.status('Bad Request');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"teste9 MX Vertical\",\r\n  \"preco\": 470,\r\n  \"descricao\": \"Mouse\",\r\n  \"quantidade\": 38134\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/produtos/7tBms2sn3NZuTaki",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"produtos",
								"7tBms2sn3NZuTaki"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "/Carrinho",
			"item": [
				{
					"name": "Listar_carrinho✔️",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status do código é 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/carrinhos",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"carrinhos"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cadastrar_carrinho✔️",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Status está escrito Created\", function () {\r",
									"    pm.response.to.have.status(\"Created\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const url = pm.environment.get('baseUrl');\r",
									"const login = pm.variables.replaceIn('{{$randomEmail}}');\r",
									"\r",
									"\r",
									"\r",
									"const CadastroUsuario = {\r",
									"    url: `${url}/usuarios`,\r",
									"    method: 'POST',\r",
									"    header: { 'Content-Type': 'application/json' },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            \"nome\": 'Teste usuaário aleatório',\r",
									"            \"email\": login,\r",
									"            \"password\": 'teste',\r",
									"            \"administrador\": \"true\"\r",
									"        })\r",
									"    }\r",
									"}\r",
									"pm.sendRequest(CadastroUsuario, (err, response) => {\r",
									"    console.log(err ? err : response.json());\r",
									"    try {\r",
									"        pm.environment.set('idUsuario', response.json()._id);\r",
									"\r",
									"\r",
									"        const loginAdm = {\r",
									"            url: `${url}/login`,\r",
									"            method: 'POST',\r",
									"            header: {\r",
									"                'Content-Type': 'application/json',\r",
									"\r",
									"            },\r",
									"            body: {\r",
									"                mode: 'raw',\r",
									"                raw: JSON.stringify({\r",
									"                    \"email\": login,\r",
									"                    \"password\": \"teste\"\r",
									"                })\r",
									"            }\r",
									"        };\r",
									"\r",
									"        pm.sendRequest(loginAdm, (err, response) => {\r",
									"            console.log(err ? err : response.json());\r",
									"            try {\r",
									"                pm.environment.set('token', response.json().authorization.slice(7))\r",
									"            } catch{\r",
									"                console.warn('Falhou login')\r",
									"            }\r",
									"        });\r",
									"\r",
									"    } catch{\r",
									"        console.log(\"Falhou criação de usuário\");\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\": \"BeeJh5lz3k6kSIzA\",\r\n      \"quantidade\": 1\r\n      \r\n    }\r\n    \r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/carrinhos",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"carrinhos"
							]
						}
					},
					"response": []
				},
				{
					"name": "Buscar_carrinho✔️",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status do código é 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/carrinhos/YzuyqL69CkzCIHQ5",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"carrinhos",
								"YzuyqL69CkzCIHQ5"
							]
						}
					},
					"response": []
				},
				{
					"name": "Concluir _compra✔️",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const url = pm.environment.get('acessoUrl')\r",
									"let name = pm.variables.replaceIn('{{$randomFullName}}')\r",
									"let email = pm.variables.replaceIn('{{$randomEmail}}')\r",
									"let senha = pm.variables.replaceIn('{{$randomPassword}}')\r",
									"let nomeProduto = pm.variables.replaceIn('{{$randomProductName}}')\r",
									"let preco = pm.variables.replaceIn('{{$randomInt}}')\r",
									"let descricao = pm.variables.replaceIn('{{$randomProductMaterial}}')\r",
									"let quantidade = pm.variables.replaceIn('{{$randomInt}}')\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"const cadastro = {\r",
									"\r",
									"\r",
									"    url: `${url}/usuarios`,\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            \"nome\": name,\r",
									"            \"email\": email,\r",
									"            \"password\": senha,\r",
									"            \"administrador\": \"true\"\r",
									"        })\r",
									"    }\r",
									"\r",
									"\r",
									"}\r",
									"pm.sendRequest(cadastro, (err, response) => {\r",
									"    const res = response.json()\r",
									"    console.log(err ? err : res);\r",
									"    try {\r",
									"        //operação\r",
									"        pm.environment.set('emailValido', email)\r",
									"        pm.environment.set('senhaValida', senha)\r",
									"        pm.environment.set('_id', res._id)\r",
									"\r",
									"\r",
									"        const login = {\r",
									"            url: `${url}/login`,\r",
									"            method: 'POST',\r",
									"            header: {\r",
									"                'Content-Type': 'application/json'\r",
									"            },\r",
									"            body: {\r",
									"                mode: 'raw',\r",
									"                raw: JSON.stringify({\r",
									"                    \"email\": email,\r",
									"                    \"password\": senha\r",
									"                })\r",
									"            }\r",
									"        }\r",
									"\r",
									"\r",
									"        pm.sendRequest(login, function (err, response) {\r",
									"            const res = response.json()\r",
									"            console.log(err ? err : res);\r",
									"            try {\r",
									"                //operação\r",
									"                pm.environment.set('token', res.authorization.slice(7))\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"            } catch{\r",
									"                //outraOp\r",
									"                console.warn(\"Falha no login\")\r",
									"            }\r",
									"            let tokenTeste = pm.environment.get('token')\r",
									"            const postRequestCadProduto = {\r",
									"\r",
									"\r",
									"                url: `${url}/produtos`,\r",
									"                method: 'POST',\r",
									"                header: {\r",
									"                    'Authorization': `Bearer ${tokenTeste}`,\r",
									"                    'Content-Type': 'application/json'\r",
									"                },\r",
									"                body: {\r",
									"                    mode: 'raw',\r",
									"                    raw: JSON.stringify({\r",
									"                        \"nome\": nomeProduto,\r",
									"                        \"preco\": preco,\r",
									"                        \"descricao\": descricao,\r",
									"                        \"quantidade\": quantidade\r",
									"                    })\r",
									"                }\r",
									"\r",
									"\r",
									"            }\r",
									"\r",
									"\r",
									"            pm.sendRequest(postRequestCadProduto, (err, response) => {\r",
									"                pm.environment.get('token')\r",
									"                const res = response.json()\r",
									"                console.log(err ? err : res);\r",
									"                try {\r",
									"                    //operação        \r",
									"                    pm.environment.set('_idProduto', res._id)\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"                } catch{\r",
									"                    //outraOp\r",
									"                    console.warn(\"Falha na requisição\")\r",
									"                }\r",
									"\r",
									"\r",
									"                let _idProduto = pm.environment.get('_idProduto')\r",
									"                const postRequestCadCarrinho = {\r",
									"\r",
									"\r",
									"                    url: `${url}/carrinhos`,\r",
									"                    method: 'POST',\r",
									"                    header: {\r",
									"                        'Authorization': `Bearer ${tokenTeste}`,\r",
									"                        'Content-Type': 'application/json'\r",
									"                    },\r",
									"                    body: {\r",
									"                        mode: 'raw',\r",
									"                        raw: JSON.stringify({\r",
									"                            \"produtos\": [\r",
									"                                {\r",
									"                                    \"idProduto\": `${_idProduto}`,\r",
									"                                    \"quantidade\": 1\r",
									"                                }\r",
									"                            ]\r",
									"                        })\r",
									"                    }\r",
									"\r",
									"\r",
									"                }\r",
									"\r",
									"\r",
									"                pm.sendRequest(postRequestCadCarrinho, (err, response) => {\r",
									"\r",
									"\r",
									"                    pm.environment.get('token')\r",
									"                    const res = response.json()\r",
									"                    console.log(err ? err : res);\r",
									"\r",
									"\r",
									"                })\r",
									"\r",
									"\r",
									"            })\r",
									"\r",
									"\r",
									"\r",
									"        });\r",
									"\r",
									"\r",
									"    } catch{\r",
									"        //outraOp\r",
									"        console.warn(\"Falha no cadastro\")\r",
									"    }\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status do código é 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Mensagem  está  correta\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Registro excluído com sucesso\");\r",
									"});\r",
									"\r",
									"pm.test(\"Status do código é OK\", function () {\r",
									"    pm.response.to.have.status(\"OK\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/carrinhos/concluir-compra",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"carrinhos",
								"concluir-compra"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cancelar_compra✔️",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status do código é 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Mensagem  está  correta\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Registro excluído com sucesso. Estoque dos produtos reabastecido\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const url = pm.environment.get('acessoUrl')\r",
									"let name = pm.variables.replaceIn('{{$randomFullName}}')\r",
									"let email = pm.variables.replaceIn('{{$randomEmail}}')\r",
									"let senha = pm.variables.replaceIn('{{$randomPassword}}')\r",
									"let nomeProduto = pm.variables.replaceIn('{{$randomProductName}}')\r",
									"let preco = pm.variables.replaceIn('{{$randomInt}}')\r",
									"let descricao = pm.variables.replaceIn('{{$randomProductMaterial}}')\r",
									"let quantidade = pm.variables.replaceIn('{{$randomInt}}')\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"const cadastro = {\r",
									"\r",
									"\r",
									"    url: `${url}/usuarios`,\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            \"nome\": name,\r",
									"            \"email\": email,\r",
									"            \"password\": senha,\r",
									"            \"administrador\": \"true\"\r",
									"        })\r",
									"    }\r",
									"\r",
									"\r",
									"}\r",
									"pm.sendRequest(cadastro, (err, response) => {\r",
									"    const res = response.json()\r",
									"    console.log(err ? err : res);\r",
									"    try {\r",
									"        //operação\r",
									"        pm.environment.set('emailValido', email)\r",
									"        pm.environment.set('senhaValida', senha)\r",
									"        pm.environment.set('_id', res._id)\r",
									"\r",
									"\r",
									"        const login = {\r",
									"            url: `${url}/login`,\r",
									"            method: 'POST',\r",
									"            header: {\r",
									"                'Content-Type': 'application/json'\r",
									"            },\r",
									"            body: {\r",
									"                mode: 'raw',\r",
									"                raw: JSON.stringify({\r",
									"                    \"email\": email,\r",
									"                    \"password\": senha\r",
									"                })\r",
									"            }\r",
									"        }\r",
									"\r",
									"\r",
									"        pm.sendRequest(login, function (err, response) {\r",
									"            const res = response.json()\r",
									"            console.log(err ? err : res);\r",
									"            try {\r",
									"                //operação\r",
									"                pm.environment.set('token', res.authorization.slice(7))\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"            } catch{\r",
									"                //outraOp\r",
									"                console.warn(\"Falha no login\")\r",
									"            }\r",
									"            let tokenTeste = pm.environment.get('token')\r",
									"            const postRequestCadProduto = {\r",
									"\r",
									"\r",
									"                url: `${url}/produtos`,\r",
									"                method: 'POST',\r",
									"                header: {\r",
									"                    'Authorization': `Bearer ${tokenTeste}`,\r",
									"                    'Content-Type': 'application/json'\r",
									"                },\r",
									"                body: {\r",
									"                    mode: 'raw',\r",
									"                    raw: JSON.stringify({\r",
									"                        \"nome\": nomeProduto,\r",
									"                        \"preco\": preco,\r",
									"                        \"descricao\": descricao,\r",
									"                        \"quantidade\": quantidade\r",
									"                    })\r",
									"                }\r",
									"\r",
									"\r",
									"            }\r",
									"\r",
									"\r",
									"            pm.sendRequest(postRequestCadProduto, (err, response) => {\r",
									"                pm.environment.get('token')\r",
									"                const res = response.json()\r",
									"                console.log(err ? err : res);\r",
									"                try {\r",
									"                    //operação        \r",
									"                    pm.environment.set('_idProduto', res._id)\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"                } catch{\r",
									"                    //outraOp\r",
									"                    console.warn(\"Falha na requisição\")\r",
									"                }\r",
									"\r",
									"\r",
									"                let _idProduto = pm.environment.get('_idProduto')\r",
									"                const postRequestCadCarrinho = {\r",
									"\r",
									"\r",
									"                    url: `${url}/carrinhos`,\r",
									"                    method: 'POST',\r",
									"                    header: {\r",
									"                        'Authorization': `Bearer ${tokenTeste}`,\r",
									"                        'Content-Type': 'application/json'\r",
									"                    },\r",
									"                    body: {\r",
									"                        mode: 'raw',\r",
									"                        raw: JSON.stringify({\r",
									"                            \"produtos\": [\r",
									"                                {\r",
									"                                    \"idProduto\": `${_idProduto}`,\r",
									"                                    \"quantidade\": 1\r",
									"                                }\r",
									"                            ]\r",
									"                        })\r",
									"                    }\r",
									"\r",
									"\r",
									"                }\r",
									"\r",
									"\r",
									"                pm.sendRequest(postRequestCadCarrinho, (err, response) => {\r",
									"\r",
									"\r",
									"                    pm.environment.get('token')\r",
									"                    const res = response.json()\r",
									"                    console.log(err ? err : res);\r",
									"\r",
									"\r",
									"                })\r",
									"\r",
									"\r",
									"            })\r",
									"\r",
									"\r",
									"\r",
									"        });\r",
									"\r",
									"\r",
									"    } catch{\r",
									"        //outraOp\r",
									"        console.warn(\"Falha no cadastro\")\r",
									"    }\r",
									"})\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/carrinhos/cancelar-compra",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"carrinhos",
								"cancelar-compra"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cad.carrinho.sem.Estoque❌",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code é 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Status está escrito Bad Request\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const url = pm.environment.get('baseUrl');\r",
									"const login = pm.variables.replaceIn('{{$randomEmail}}');\r",
									"\r",
									"\r",
									"\r",
									"const CadastroUsuario = {\r",
									"    url: `${url}/usuarios`,\r",
									"    method: 'POST',\r",
									"    header: { 'Content-Type': 'application/json' },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            \"nome\": 'Teste usuaário aleatório',\r",
									"            \"email\": login,\r",
									"            \"password\": 'teste',\r",
									"            \"administrador\": \"true\"\r",
									"        })\r",
									"    }\r",
									"}\r",
									"pm.sendRequest(CadastroUsuario, (err, response) => {\r",
									"    console.log(err ? err : response.json());\r",
									"    try {\r",
									"        pm.environment.set('idUsuario', response.json()._id);\r",
									"\r",
									"\r",
									"        const loginAdm = {\r",
									"            url: `${url}/login`,\r",
									"            method: 'POST',\r",
									"            header: {\r",
									"                'Content-Type': 'application/json',\r",
									"\r",
									"            },\r",
									"            body: {\r",
									"                mode: 'raw',\r",
									"                raw: JSON.stringify({\r",
									"                    \"email\": login,\r",
									"                    \"password\": \"teste\"\r",
									"                })\r",
									"            }\r",
									"        };\r",
									"\r",
									"        pm.sendRequest(loginAdm, (err, response) => {\r",
									"            console.log(err ? err : response.json());\r",
									"            try {\r",
									"                pm.environment.set('token', response.json().authorization.slice(7))\r",
									"            } catch{\r",
									"                console.warn('Falhou login')\r",
									"            }\r",
									"        });\r",
									"\r",
									"    } catch{\r",
									"        console.log(\"Falhou criação de usuário\");\r",
									"    }\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\": \"iVFRX3MsJrpNBPUQ\",\r\n      \"quantidade\": 1\r\n      \r\n    }\r\n    \r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/carrinhos",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"carrinhos"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cadastrar_+1carrinho❌",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const url = pm.environment.get('acessoUrl')\r",
									"let name = pm.variables.replaceIn('{{$randomFullName}}')\r",
									"let email = pm.variables.replaceIn('{{$randomEmail}}')\r",
									"let senha = pm.variables.replaceIn('{{$randomPassword}}')\r",
									"let nomeProduto = pm.variables.replaceIn('{{$randomProductName}}')\r",
									"let preco = pm.variables.replaceIn('{{$randomInt}}')\r",
									"let descricao = pm.variables.replaceIn('{{$randomProductMaterial}}')\r",
									"let quantidade = pm.variables.replaceIn('{{$randomInt}}')\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"const cadastro = {\r",
									"\r",
									"\r",
									"    url: `${url}/usuarios`,\r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            \"nome\": name,\r",
									"            \"email\": email,\r",
									"            \"password\": senha,\r",
									"            \"administrador\": \"true\"\r",
									"        })\r",
									"    }\r",
									"\r",
									"\r",
									"}\r",
									"pm.sendRequest(cadastro, (err, response) => {\r",
									"    const res = response.json()\r",
									"    console.log(err ? err : res);\r",
									"    try {\r",
									"        //operação\r",
									"        pm.environment.set('emailValido', email)\r",
									"        pm.environment.set('senhaValida', senha)\r",
									"        pm.environment.set('_id', res._id)\r",
									"\r",
									"\r",
									"        const login = {\r",
									"            url: `${url}/login`,\r",
									"            method: 'POST',\r",
									"            header: {\r",
									"                'Content-Type': 'application/json'\r",
									"            },\r",
									"            body: {\r",
									"                mode: 'raw',\r",
									"                raw: JSON.stringify({\r",
									"                    \"email\": email,\r",
									"                    \"password\": senha\r",
									"                })\r",
									"            }\r",
									"        }\r",
									"\r",
									"\r",
									"        pm.sendRequest(login, function (err, response) {\r",
									"            const res = response.json()\r",
									"            console.log(err ? err : res);\r",
									"            try {\r",
									"                //operação\r",
									"                pm.environment.set('token', res.authorization.slice(7))\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"            } catch{\r",
									"                //outraOp\r",
									"                console.warn(\"Falha no login\")\r",
									"            }\r",
									"            let tokenTeste = pm.environment.get('token')\r",
									"            const postRequestCadProduto = {\r",
									"\r",
									"\r",
									"                url: `${url}/produtos`,\r",
									"                method: 'POST',\r",
									"                header: {\r",
									"                    'Authorization': `Bearer ${tokenTeste}`,\r",
									"                    'Content-Type': 'application/json'\r",
									"                },\r",
									"                body: {\r",
									"                    mode: 'raw',\r",
									"                    raw: JSON.stringify({\r",
									"                        \"nome\": nomeProduto,\r",
									"                        \"preco\": preco,\r",
									"                        \"descricao\": descricao,\r",
									"                        \"quantidade\": quantidade\r",
									"                    })\r",
									"                }\r",
									"\r",
									"\r",
									"            }\r",
									"\r",
									"\r",
									"            pm.sendRequest(postRequestCadProduto, (err, response) => {\r",
									"                pm.environment.get('token')\r",
									"                const res = response.json()\r",
									"                console.log(err ? err : res);\r",
									"                try {\r",
									"                    //operação        \r",
									"                    pm.environment.set('_idProduto', res._id)\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"                } catch{\r",
									"                    //outraOp\r",
									"                    console.warn(\"Falha na requisição\")\r",
									"                }\r",
									"\r",
									"\r",
									"                let _idProduto = pm.environment.get('_idProduto')\r",
									"                const postRequestCadCarrinho = {\r",
									"\r",
									"\r",
									"                    url: `${url}/carrinhos`,\r",
									"                    method: 'POST',\r",
									"                    header: {\r",
									"                        'Authorization': `Bearer ${tokenTeste}`,\r",
									"                        'Content-Type': 'application/json'\r",
									"                    },\r",
									"                    body: {\r",
									"                        mode: 'raw',\r",
									"                        raw: JSON.stringify({\r",
									"                            \"produtos\": [\r",
									"                                {\r",
									"                                    \"idProduto\": `${_idProduto}`,\r",
									"                                    \"quantidade\": 1\r",
									"                                }\r",
									"                            ]\r",
									"                        })\r",
									"                    }\r",
									"\r",
									"\r",
									"                }\r",
									"\r",
									"\r",
									"                pm.sendRequest(postRequestCadCarrinho, (err, response) => {\r",
									"\r",
									"\r",
									"                    pm.environment.get('token')\r",
									"                    const res = response.json()\r",
									"                    console.log(err ? err : res);\r",
									"\r",
									"\r",
									"                })\r",
									"\r",
									"\r",
									"            })\r",
									"\r",
									"\r",
									"\r",
									"        });\r",
									"\r",
									"\r",
									"    } catch{\r",
									"        //outraOp\r",
									"        console.warn(\"Falha no cadastro\")\r",
									"    }\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status do código é 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Mensagem  está  correta\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Não é permitido ter mais de 1 carrinho\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\": \"BeeJh5lz3k6kSIzA\",\r\n      \"quantidade\": 1\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/carrinhos",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"carrinhos"
							]
						}
					},
					"response": []
				},
				{
					"name": "Cad.Carri.Prod.repetido❌",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const url = pm.environment.get('baseUrl');\r",
									"\r",
									"let name = pm.variables.replaceIn('{{$randomFullName}}')\r",
									"let email = pm.variables.replaceIn('{{$randomEmail}}')\r",
									"let senha = pm.variables.replaceIn('{{$randomPassword}}')\r",
									"let nomeProduto = pm.variables.replaceIn('{{$randomProductName}}')\r",
									"let preco = pm.variables.replaceIn('{{$randomInt}}')\r",
									"let descricao = pm.variables.replaceIn('{{$randomProductMaterial}}')\r",
									"let quantidade = pm.variables.replaceIn('{{$randomInt}}')\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"const postRequestCadastro = {\r",
									"\r",
									"\r",
									"    url: `${url}/usuarios`, \r",
									"    method: 'POST',\r",
									"    header: {\r",
									"        'Content-Type': 'application/json'\r",
									"    },\r",
									"    body: {\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify({\r",
									"            \"nome\": name,\r",
									"            \"email\": email,\r",
									"            \"password\": senha,\r",
									"            \"administrador\": \"true\"\r",
									"        })\r",
									"    }\r",
									"\r",
									"\r",
									"}\r",
									"pm.sendRequest(postRequestCadastro, (err, response) => {\r",
									"    const res = response.json()\r",
									"    console.log(err ? err : res);\r",
									"    try {\r",
									"        //operação\r",
									"        pm.environment.set('emailValido', email)\r",
									"        pm.environment.set('senhaValida', senha)\r",
									"        pm.environment.set('_id', res._id)\r",
									"        \r",
									"        const postRequestLogin = {\r",
									"            url: `${url}/login`, \r",
									"            method: 'POST',\r",
									"            header: {\r",
									"                'Content-Type': 'application/json'\r",
									"            },\r",
									"            body: {\r",
									"                mode: 'raw',\r",
									"                raw: JSON.stringify({\r",
									"                    \"email\": email,\r",
									"                    \"password\": senha\r",
									"                })\r",
									"            }\r",
									"}\r",
									"\r",
									"\r",
									"            pm.sendRequest(postRequestLogin, function (err, response) {\r",
									"                const res = response.json()\r",
									"                console.log(err ? err : res);\r",
									"                try {\r",
									"                    //operação\r",
									"                    pm.environment.set('token', res.authorization.slice(7))\r",
									"                    \r",
									"                                    \r",
									"                    \r",
									"\r",
									"\r",
									"                } catch{\r",
									"                    //outraOp\r",
									"                    console.warn(\"Falha no login\")\r",
									"                }\r",
									"                let tokenTeste = pm.environment.get('token')\r",
									"                 const postRequestCadProduto = {\r",
									"\r",
									"\r",
									"                        url: `${url}/produtos`, \r",
									"                        method: 'POST',\r",
									"                        header: {\r",
									"                            'Authorization': `Bearer ${tokenTeste}`,\r",
									"                            'Content-Type': 'application/json'\r",
									"                        },\r",
									"                        body: {\r",
									"                            mode: 'raw',\r",
									"                            raw: JSON.stringify({\r",
									"                                \"nome\": nomeProduto,\r",
									"                                \"preco\": preco,\r",
									"                                \"descricao\": descricao,\r",
									"                                \"quantidade\": quantidade\r",
									"                            })\r",
									"                        }\r",
									"\r",
									"\r",
									"                    }  \r",
									"\r",
									"\r",
									"                pm.sendRequest(postRequestCadProduto, (err, response) => {\r",
									"                            pm.environment.get('token')\r",
									"                            const res = response.json()\r",
									"                            console.log(err ? err : res);\r",
									"                            try {\r",
									"                                //operação        \r",
									"                                pm.environment.set('_idProduto', res._id)\r",
									"                                \r",
									"                              \r",
									"                                \r",
									"                            } catch{\r",
									"                                //outraOp\r",
									"                                console.warn(\"Falha na requisição\")\r",
									"                            }\r",
									"                            \r",
									"                        })\r",
									"\r",
									"\r",
									"            });\r",
									"\r",
									"\r",
									"    } catch{\r",
									"        //outraOp\r",
									"        console.warn(\"Falha no cadastro\")\r",
									"    }\r",
									"})\r",
									"\r",
									"const loginAdm = {\r",
									"  url: `${url}/login`,\r",
									"  method: 'POST',\r",
									"  header: {\r",
									"    'Content-Type': 'application/json',\r",
									"    \r",
									"  },\r",
									"  body: {\r",
									"    mode: 'raw',\r",
									"    raw: JSON.stringify({ \r",
									"        \"email\": \"Comum@qa.com.br\",\r",
									"         \"password\": \"teste\", })\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.sendRequest(loginAdm, (err, response) => {\r",
									"    console.log(err ? err : response.json());\r",
									"    try{\r",
									"        pm.environment.set('token', response.json().authorization.slice(7))\r",
									"    }catch{\r",
									"        console.log('Erro')\r",
									"    }\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status do código é 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Mensagem  está  correta\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\": \"BeeJh5lz3k6kSIzA\",\r\n      \"quantidade\": 1\r\n      \r\n      \r\n    },\r\n    {\r\n      \"idProduto\": \"BeeJh5lz3k6kSIzA\",\r\n      \"quantidade\": 1\r\n      \r\n      \r\n    }\r\n    \r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/carrinhos",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"carrinhos"
							]
						}
					},
					"response": []
				},
				{
					"name": "Buscar_carrinho_sem_ID❌",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status do código é 200\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Status do código é Bad Request\", function () {\r",
									"    pm.response.to.have.status(\"Bad Request\");\r",
									"});\r",
									"\r",
									"pm.test(\"Mensagem  está  correta\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"Carrinho não encontrado\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/carrinhos/YzuyqL69CkzCIHQ7",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"carrinhos",
								"YzuyqL69CkzCIHQ7"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"variable": [
		{
			"key": "req_body",
			"value": ""
		}
	]
}